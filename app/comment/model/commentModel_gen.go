// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentFieldNames          = builder.RawFieldNames(&Comment{})
	commentRows                = strings.Join(commentFieldNames, ",")
	commentRowsExpectAutoSet   = strings.Join(stringx.Remove(commentFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	commentRowsWithPlaceHolder = strings.Join(stringx.Remove(commentFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheCommentIdPrefix        = "cache:comment:id:"
	cacheCommentCommentIdPrefix = "cache:comment:commentId:"
)

type (
	commentModel interface {
		Insert(ctx context.Context, data *Comment, session sqlx.Session) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Comment, error)
		FindOneByCommentId(ctx context.Context, commentId string) (*Comment, error)
		Update(ctx context.Context, data *Comment, session sqlx.Session) error
		Delete(ctx context.Context, id int64, session sqlx.Session) error
	}

	defaultCommentModel struct {
		sqlc.CachedConn
		table string
	}

	Comment struct {
		Id               int64        `db:"id"`                // 自增id
		CommentId        string       `db:"comment_id"`        // 评论id
		CommentContent   string       `db:"comment_content"`   // 评论内容
		CommentatorName  string       `db:"commentator_name"`  // 发表评论者
		CommentatorEmail string       `db:"commentator_email"` // 发表评论者邮箱
		SupportTotal     int64        `db:"support_total"`     // 点赞总数
		ArticleId        string       `db:"article_id"`        // 文章id
		ParentId         string       `db:"parent_id"`         // 父评论id, 0默认顶层
		IsPub            int64        `db:"is_pub"`            // 评论是否仅最多三方可看, 1默认公开
		CreateTime       time.Time    `db:"create_time"`
		UpdateTime       time.Time    `db:"update_time"`
		DeletedTime      sql.NullTime `db:"deleted_time"`
	}
)

func newCommentModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCommentModel {
	return &defaultCommentModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`comment`",
	}
}

func (m *defaultCommentModel) Delete(ctx context.Context, id int64, session sqlx.Session) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	commentCommentIdKey := fmt.Sprintf("%s%v", cacheCommentCommentIdPrefix, data.CommentId)
	commentIdKey := fmt.Sprintf("%s%v", cacheCommentIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session == nil {
			return conn.ExecCtx(ctx, query, id)
		}
		return session.ExecCtx(ctx, query, id)
	}, commentCommentIdKey, commentIdKey)
	return err
}

func (m *defaultCommentModel) FindOne(ctx context.Context, id int64) (*Comment, error) {
	commentIdKey := fmt.Sprintf("%s%v", cacheCommentIdPrefix, id)
	var resp Comment
	err := m.QueryRowCtx(ctx, &resp, commentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", commentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) FindOneByCommentId(ctx context.Context, commentId string) (*Comment, error) {
	commentCommentIdKey := fmt.Sprintf("%s%v", cacheCommentCommentIdPrefix, commentId)
	var resp Comment
	err := m.QueryRowIndexCtx(ctx, &resp, commentCommentIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `comment_id` = ? limit 1", commentRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, commentId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) Insert(ctx context.Context, data *Comment, session sqlx.Session) (sql.Result, error) {
	commentCommentIdKey := fmt.Sprintf("%s%v", cacheCommentCommentIdPrefix, data.CommentId)
	commentIdKey := fmt.Sprintf("%s%v", cacheCommentIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, commentRowsExpectAutoSet)
		if session == nil {
			return conn.ExecCtx(ctx, query, data.CommentId, data.CommentContent, data.CommentatorName, data.CommentatorEmail, data.SupportTotal, data.ArticleId, data.ParentId, data.IsPub, data.DeletedTime)
		}
		return session.ExecCtx(ctx, query, data.CommentId, data.CommentContent, data.CommentatorName, data.CommentatorEmail, data.SupportTotal, data.ArticleId, data.ParentId, data.IsPub, data.DeletedTime)
	}, commentCommentIdKey, commentIdKey)
	return ret, err
}

func (m *defaultCommentModel) Update(ctx context.Context, newData *Comment, session sqlx.Session) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	commentCommentIdKey := fmt.Sprintf("%s%v", cacheCommentCommentIdPrefix, data.CommentId)
	commentIdKey := fmt.Sprintf("%s%v", cacheCommentIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, commentRowsWithPlaceHolder)
		if session == nil {
			return conn.ExecCtx(ctx, query, newData.CommentId, newData.CommentContent, newData.CommentatorName, newData.CommentatorEmail, newData.SupportTotal, newData.ArticleId, newData.ParentId, newData.IsPub, newData.DeletedTime, newData.Id)
		}
		return session.ExecCtx(ctx, query, newData.CommentId, newData.CommentContent, newData.CommentatorName, newData.CommentatorEmail, newData.SupportTotal, newData.ArticleId, newData.ParentId, newData.IsPub, newData.DeletedTime, newData.Id)
	}, commentCommentIdKey, commentIdKey)
	return err
}

func (m *defaultCommentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheCommentIdPrefix, primary)
}

func (m *defaultCommentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", commentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCommentModel) tableName() string {
	return m.table
}
