// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	articleContentFieldNames          = builder.RawFieldNames(&ArticleContent{})
	articleContentRows                = strings.Join(articleContentFieldNames, ",")
	articleContentRowsExpectAutoSet   = strings.Join(stringx.Remove(articleContentFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	articleContentRowsWithPlaceHolder = strings.Join(stringx.Remove(articleContentFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheArticleContentIdPrefix        = "cache:articleContent:id:"
	cacheArticleContentArticleIdPrefix = "cache:articleContent:articleId:"
)

type (
	articleContentModel interface {
		Insert(ctx context.Context, data *ArticleContent, session sqlx.Session) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ArticleContent, error)
		FindOneByArticleId(ctx context.Context, articleId string) (*ArticleContent, error)
		Update(ctx context.Context, data *ArticleContent, session sqlx.Session) error
		Delete(ctx context.Context, id int64, session sqlx.Session) error
	}

	defaultArticleContentModel struct {
		sqlc.CachedConn
		table string
	}

	ArticleContent struct {
		Id             int64        `db:"id"`               // 自增id
		ArticleId      string       `db:"article_id"`       // 文章id
		ArticleCttHtml string       `db:"article_ctt_html"` // 文章html内容
		ArticleCttMd   string       `db:"article_ctt_md"`   // 文章markdown内容
		CreateTime     time.Time    `db:"create_time"`
		UpdateTime     time.Time    `db:"update_time"`
		DeletedTime    sql.NullTime `db:"deleted_time"`
	}
)

func newArticleContentModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultArticleContentModel {
	return &defaultArticleContentModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`article_content`",
	}
}

func (m *defaultArticleContentModel) Delete(ctx context.Context, id int64, session sqlx.Session) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	articleContentArticleIdKey := fmt.Sprintf("%s%v", cacheArticleContentArticleIdPrefix, data.ArticleId)
	articleContentIdKey := fmt.Sprintf("%s%v", cacheArticleContentIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session == nil {
			return conn.ExecCtx(ctx, query, id)
		}
		return session.ExecCtx(ctx, query, id)
	}, articleContentArticleIdKey, articleContentIdKey)
	return err
}

func (m *defaultArticleContentModel) FindOne(ctx context.Context, id int64) (*ArticleContent, error) {
	articleContentIdKey := fmt.Sprintf("%s%v", cacheArticleContentIdPrefix, id)
	var resp ArticleContent
	err := m.QueryRowCtx(ctx, &resp, articleContentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", articleContentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleContentModel) FindOneByArticleId(ctx context.Context, articleId string) (*ArticleContent, error) {
	articleContentArticleIdKey := fmt.Sprintf("%s%v", cacheArticleContentArticleIdPrefix, articleId)
	var resp ArticleContent
	err := m.QueryRowIndexCtx(ctx, &resp, articleContentArticleIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `article_id` = ? limit 1", articleContentRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, articleId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleContentModel) Insert(ctx context.Context, data *ArticleContent, session sqlx.Session) (sql.Result, error) {
	articleContentArticleIdKey := fmt.Sprintf("%s%v", cacheArticleContentArticleIdPrefix, data.ArticleId)
	articleContentIdKey := fmt.Sprintf("%s%v", cacheArticleContentIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, articleContentRowsExpectAutoSet)
		if session == nil {
			return conn.ExecCtx(ctx, query, data.ArticleId, data.ArticleCttHtml, data.ArticleCttMd, data.DeletedTime)
		}
		return session.ExecCtx(ctx, query, data.ArticleId, data.ArticleCttHtml, data.ArticleCttMd, data.DeletedTime)
	}, articleContentArticleIdKey, articleContentIdKey)
	return ret, err
}

func (m *defaultArticleContentModel) Update(ctx context.Context, newData *ArticleContent, session sqlx.Session) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	articleContentArticleIdKey := fmt.Sprintf("%s%v", cacheArticleContentArticleIdPrefix, data.ArticleId)
	articleContentIdKey := fmt.Sprintf("%s%v", cacheArticleContentIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, articleContentRowsWithPlaceHolder)
		if session == nil {
			return conn.ExecCtx(ctx, query, newData.ArticleId, newData.ArticleCttHtml, newData.ArticleCttMd, newData.DeletedTime, newData.Id)
		}
		return session.ExecCtx(ctx, query, newData.ArticleId, newData.ArticleCttHtml, newData.ArticleCttMd, newData.DeletedTime, newData.Id)
	}, articleContentArticleIdKey, articleContentIdKey)
	return err
}

func (m *defaultArticleContentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheArticleContentIdPrefix, primary)
}

func (m *defaultArticleContentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", articleContentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultArticleContentModel) tableName() string {
	return m.table
}
