// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	articleGroupRelFieldNames          = builder.RawFieldNames(&ArticleGroupRel{})
	articleGroupRelRows                = strings.Join(articleGroupRelFieldNames, ",")
	articleGroupRelRowsExpectAutoSet   = strings.Join(stringx.Remove(articleGroupRelFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	articleGroupRelRowsWithPlaceHolder = strings.Join(stringx.Remove(articleGroupRelFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheArticleGroupRelIdPrefix             = "cache:articleGroupRel:id:"
	cacheArticleGroupRelArticleGroupIdPrefix = "cache:articleGroupRel:articleGroupId:"
	cacheArticleGroupRelArticleIdPrefix      = "cache:articleGroupRel:articleId:"
)

type (
	articleGroupRelModel interface {
		Insert(ctx context.Context, data *ArticleGroupRel) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ArticleGroupRel, error)
		FindOneByArticleGroupId(ctx context.Context, articleGroupId string) (*ArticleGroupRel, error)
		FindOneByArticleId(ctx context.Context, articleId string) (*ArticleGroupRel, error)
		Update(ctx context.Context, data *ArticleGroupRel) error
		Delete(ctx context.Context, id int64) error
	}

	defaultArticleGroupRelModel struct {
		sqlc.CachedConn
		table string
	}

	ArticleGroupRel struct {
		Id             int64        `db:"id"`               // 自增id
		ArticleGroupId string       `db:"article_group_id"` // 分类目录id
		ArticleId      string       `db:"article_id"`       // 文章id
		CreateTime     time.Time    `db:"create_time"`
		UpdateTime     time.Time    `db:"update_time"`
		DeletedTime    sql.NullTime `db:"deleted_time"`
	}
)

func newArticleGroupRelModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultArticleGroupRelModel {
	return &defaultArticleGroupRelModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`article_group_rel`",
	}
}

func (m *defaultArticleGroupRelModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	articleGroupRelArticleGroupIdKey := fmt.Sprintf("%s%v", cacheArticleGroupRelArticleGroupIdPrefix, data.ArticleGroupId)
	articleGroupRelArticleIdKey := fmt.Sprintf("%s%v", cacheArticleGroupRelArticleIdPrefix, data.ArticleId)
	articleGroupRelIdKey := fmt.Sprintf("%s%v", cacheArticleGroupRelIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, articleGroupRelArticleGroupIdKey, articleGroupRelArticleIdKey, articleGroupRelIdKey)
	return err
}

func (m *defaultArticleGroupRelModel) FindOne(ctx context.Context, id int64) (*ArticleGroupRel, error) {
	articleGroupRelIdKey := fmt.Sprintf("%s%v", cacheArticleGroupRelIdPrefix, id)
	var resp ArticleGroupRel
	err := m.QueryRowCtx(ctx, &resp, articleGroupRelIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", articleGroupRelRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleGroupRelModel) FindOneByArticleGroupId(ctx context.Context, articleGroupId string) (*ArticleGroupRel, error) {
	articleGroupRelArticleGroupIdKey := fmt.Sprintf("%s%v", cacheArticleGroupRelArticleGroupIdPrefix, articleGroupId)
	var resp ArticleGroupRel
	err := m.QueryRowIndexCtx(ctx, &resp, articleGroupRelArticleGroupIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `article_group_id` = ? limit 1", articleGroupRelRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, articleGroupId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleGroupRelModel) FindOneByArticleId(ctx context.Context, articleId string) (*ArticleGroupRel, error) {
	articleGroupRelArticleIdKey := fmt.Sprintf("%s%v", cacheArticleGroupRelArticleIdPrefix, articleId)
	var resp ArticleGroupRel
	err := m.QueryRowIndexCtx(ctx, &resp, articleGroupRelArticleIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `article_id` = ? limit 1", articleGroupRelRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, articleId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultArticleGroupRelModel) Insert(ctx context.Context, data *ArticleGroupRel) (sql.Result, error) {
	articleGroupRelArticleGroupIdKey := fmt.Sprintf("%s%v", cacheArticleGroupRelArticleGroupIdPrefix, data.ArticleGroupId)
	articleGroupRelArticleIdKey := fmt.Sprintf("%s%v", cacheArticleGroupRelArticleIdPrefix, data.ArticleId)
	articleGroupRelIdKey := fmt.Sprintf("%s%v", cacheArticleGroupRelIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, articleGroupRelRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ArticleGroupId, data.ArticleId, data.DeletedTime)
	}, articleGroupRelArticleGroupIdKey, articleGroupRelArticleIdKey, articleGroupRelIdKey)
	return ret, err
}

func (m *defaultArticleGroupRelModel) Update(ctx context.Context, newData *ArticleGroupRel) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	articleGroupRelArticleGroupIdKey := fmt.Sprintf("%s%v", cacheArticleGroupRelArticleGroupIdPrefix, data.ArticleGroupId)
	articleGroupRelArticleIdKey := fmt.Sprintf("%s%v", cacheArticleGroupRelArticleIdPrefix, data.ArticleId)
	articleGroupRelIdKey := fmt.Sprintf("%s%v", cacheArticleGroupRelIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, articleGroupRelRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ArticleGroupId, newData.ArticleId, newData.DeletedTime, newData.Id)
	}, articleGroupRelArticleGroupIdKey, articleGroupRelArticleIdKey, articleGroupRelIdKey)
	return err
}

func (m *defaultArticleGroupRelModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheArticleGroupRelIdPrefix, primary)
}

func (m *defaultArticleGroupRelModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", articleGroupRelRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultArticleGroupRelModel) tableName() string {
	return m.table
}
